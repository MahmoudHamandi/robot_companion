#!/usr/bin/env python

import rospy
import tf
import math
from geometry_msgs.msg import PoseStamped, Twist 
from actionlib_msgs.msg import GoalStatusArray
from move_base_msgs.msg import MoveBaseActionFeedback

targets = {0: (-3.090,3.803), 1:(1.245,5.245), 2:(0.620,-3.992), 3:(4.642,-1.271)}
class autoNavigation():

    def __init__(self):
        self._count = 0
        self._stat = -1
        self._dist = 0
        self._target = None

    def check_status(self,stat):
        #print stat.status_list
        if len(stat.status_list)>0:
            status =  stat.status_list.pop(0).status
        else:
            status = -1
        self._stat = status

    def feeback(self,feed):
        x = feed.feedback.base_position.pose.position.x
        y = feed.feedback.base_position.pose.position.y
        if not self._target == None:
            t = self._target
            self._dist = math.sqrt((x-t[0]) ** 2 + (y-t[1]) ** 2)

    def nav_goal(self):
        self._target = targets[self._count]
        goal = PoseStamped()
        goal.header.frame_id = "map"
        goal.header.stamp = rospy.Time.now()
        goal_xy = targets[self._count]
        self._count += 1
        goal.pose.position.x = goal_xy[0] 
        goal.pose.position.y = goal_xy[1]
        goal.pose.position.z = 0.0
        goal.pose.orientation.w = 0.5

        return goal
            
if __name__ == "__main__":
    rospy.init_node('assignment3', anonymous=True)
    rate = rospy.Rate(1)
    nav = autoNavigation()
    pub = rospy.Publisher('/move_base_simple/goal', PoseStamped, queue_size=1)
    rospy.Subscriber('/move_base/status', GoalStatusArray, nav.check_status)
    rospy.Subscriber('/move_base/feedback', MoveBaseActionFeedback, nav.feeback)
    tol = 0.1
    while not rospy.is_shutdown():
        rospy.sleep(2)
        print nav._dist, nav._stat
        if nav._count < 4 and  nav._dist < tol and (nav._stat == -1 or nav._stat == 3):
            command = nav.nav_goal()
            pub.publish(command)

